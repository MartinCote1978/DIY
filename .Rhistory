library(nhlscrapr)
library(warbase)
games.grabbed <- compile.all.games(wait=0, #date.check=TRUE,
roster.dropin=rosterprefab,
new.game.table=gamesstart,
reload.games=TRUE
)
load("C:/Users/acthomas/Documents/GitHub/nhlscrapr/data/games2015.RData")
View(gamesstart)
gamesstart <- filter(gamesstart, season >= 20072008)
save (gamesstart, file="C:/Users/acthomas/Documents/GitHub/nhlscrapr/data/games2015.RData")
games.grabbed <- compile.all.games(wait=0, #date.check=TRUE,
roster.dropin=rosterprefab,
##new.game.table=gamesstart,
reload.games=TRUE
)
library(nhlscrapr)
library(warbase)
install_github ("war-on-ice/warbase")
library(devtools)
install_github ("war-on-ice/warbase")
new.game.table=gamesstart
head(new.game.table)
new.game.table=filter (gamesstart, season >= 20072008)
View(new.game.table)
?add.dayrange.sportsnet
add.dayrange.sportsnet
library(warbase)
add.dayrange.sportsnet
seasons
unique(games$season)
library(nhlscrapr)
library(warbase)
games.grabbed <- compile.all.games(wait=0,
roster.dropin=rosterprefab,
## Want to use the existing games table? Uncomment this one.
## new.game.table=filter (gamesstart, season >= 20072008),
new.game.table=filter (gamesstart, season >= 20152016),
reload.games=TRUE)
games.grabbed <- compile.all.games(wait=0,
roster.dropin=rosterprefab,
## Want to use the existing games table? Uncomment this one.
## new.game.table=filter (gamesstart, season >= 20072008),
new.game.table=filter (gamesstart, season >= 20132014),
reload.games=TRUE)
warnings()
make.common()
make.common <- function () {
message("Making common file")
load ("source-data/nhlscrapr-core.RData")
## add montreal.
##mtlgames <- filter (mtlgames, season >= 20052006)
## OK, here's where we make a big determination.
gamestest <- filter(games, season >= 20052006)
##    gamestest$date[match(paste(mtlgames$season,mtlgames$gcode),
##                         paste(gamestest$season,gamestest$gcode))] <- mtlgames$date
seasons <- unique(gamestest$season)
## Just in case.
repl <- grep("^[0-9]+$", gamestest$date)
gamestest$date[repl] <- as.character(as.Date("1970-01-01") + as.numeric(gamestest$date[repl]))
team.colors <- read.csv ("source-data/teamcolors.csv")[,-1]   #http://teamcolors.arc90.com/
teams <- unique(as.character(team.colors$team))#; teams <- teams[teams != ""]
for (cc in 1:ncol(team.colors)) team.colors[,cc] <- as.character(team.colors[,cc])
message ("Common data done")
save(gamestest, roster.master, roster.unique,
teams, team.colors, seasons, file="common-data/woi-common.RData")
##write.csv(roster.unique, "common-data/roster.csv")
out <- gamestest[!is.na(gamestest$date),]
out <- out[nchar(out$date) > 0,]
colnames(out)[which(colnames(out)=="date")] <- "GameDate"
colnames(out)[which(colnames(out)=="homescore")] <- "Home Score"
colnames(out)[which(colnames(out)=="awayscore")] <- "Away Score"
colnames(out)[which(colnames(out)=="session")] <- "Session"
out$status <- c("Irretrievable", "NotStarted", "InProgress", "Complete")[out$status + 1]
## remove future games.
out <- filter(out, as.Date(GameDate) <= as.Date(as.POSIXlt(Sys.time() - 8*3600, "UTC")))
out <- out[rev(order(out$GameDate)),][1:75,]
save(out, file="common-data/today-games.RData")
make.short.gametable (out, "common-data/gamestoday.html")
}
make.common()
getwd()
team.colors <- read.csv ("teamcolors.csv")[,-1]
team.colors
save (team.colors, file="team.colors.RData")
team.colors <- read.csv ("teamcolors.csv", stringsAsFactors=FALSE)[,-1]
team.colors
team.colors[,4]
team.colors[,5]
save (team.colors, file="team.colors.RData")
library(devtools)
install_github ("war-on-ice/warbase")
library(warbase)
make.common()
library(devtools)
install_github ("war-on-ice/warbase")
library(warbase)
make.common()
getwd()
source ("../warbase/R/original-file-ops.R")
make.common()
make.common <- function () {
message("Making common file")
load ("source-data/nhlscrapr-core.RData")
## add montreal.
##mtlgames <- filter (mtlgames, season >= 20052006)
## OK, here's where we make a big determination.
gamestest <- filter(games, season >= 20052006)
##    gamestest$date[match(paste(mtlgames$season,mtlgames$gcode),
##                         paste(gamestest$season,gamestest$gcode))] <- mtlgames$date
seasons <- unique(gamestest$season)
## Just in case.
repl <- grep("^[0-9]+$", gamestest$date)
gamestest$date[repl] <- as.character(as.Date("1970-01-01") + as.numeric(gamestest$date[repl]))
teams <- unique(as.character(team.colors$team))#; teams <- teams[teams != ""]
message ("Common data done")
suppressWarnings(dir.create("common-data"))
suppressWarnings(dir.create("common-data/games"))
save(gamestest, roster.master, roster.unique,
teams, team.colors, seasons, file="common-data/woi-common.RData")
##write.csv(roster.unique, "common-data/roster.csv")
out <- gamestest[!is.na(gamestest$date),]
out <- out[nchar(out$date) > 0,]
colnames(out)[which(colnames(out)=="date")] <- "GameDate"
colnames(out)[which(colnames(out)=="homescore")] <- "Home Score"
colnames(out)[which(colnames(out)=="awayscore")] <- "Away Score"
colnames(out)[which(colnames(out)=="session")] <- "Session"
out$status <- c("Irretrievable", "NotStarted", "InProgress", "Complete")[out$status + 1]
## remove future games.
out <- filter(out, as.Date(GameDate) <= as.Date(as.POSIXlt(Sys.time() - 8*3600, "UTC")))
out <- out[rev(order(out$GameDate)),][1:75,]
save(out, file="common-data/today-games.RData")
make.short.gametable (out, "common-data/gamestoday.html")
}
make.common()
GamesGrabbedFull <- slice(gamestest, match(games.grabbed, paste0(gamestest$season, gamestest$gcode))) %>%
select (season, gcode, date)
load("common-data/woi-common.RData")
GamesGrabbedFull <- slice(gamestest, match(games.grabbed, paste0(gamestest$season, gamestest$gcode))) %>%
select (season, gcode, date)
GamesGrabbedFull
seasons
GamesGrabbedFull <- slice(gamestest, match(games.grabbed, paste0(gamestest$season, gamestest$gcode))) %>%
select (season, gcode, date)
for (season in seasons[seasons <= 20132014]) prep.season (substr(season,1,4))
substr(20132014,1,4)
prep.season <- function(year1=2005, savethis=TRUE, direc="source-data/") {
year1 <- as.numeric(year1)
dates <- seq(as.Date(paste0(year1,"-07-01")),
min(as.Date(paste0(year1+1,"-06-30")), Sys.Date()), by=1)
gimme <- lapply(dates, parse.day)
event.table <- do.call(rbind, gimme)
## games.list <- unique(paste0(gimme.too$GameDate, gimme.too$awayteam, gimme.too$hometeam))
if (year1 < 2011) event.table$hometeam[event.table$hometeam=="WPG"] <- "ATL"
if (year1 < 2011) event.table$awayteam[event.table$awayteam=="WPG"] <- "ATL"
if (year1 < 2014) event.table$hometeam[event.table$hometeam=="ARI"] <- "PHX"
if (year1 < 2014) event.table$awayteam[event.table$awayteam=="ARI"] <- "PHX"
if (savethis) save (event.table, file=paste0(direc,"espn-", year, year+1,".RData"))
return(event.table)
}
for (season in seasons[seasons <= 20132014]) prep.season (substr(season,1,4))
prep.season <- function(year1=2005, savethis=TRUE, direc="source-data/") {
dir.create ("espn-games", showWarnings = FALSE)
year1 <- as.numeric(year1)
dates <- seq(as.Date(paste0(year1,"-07-01")),
min(as.Date(paste0(year1+1,"-06-30")), Sys.Date()), by=1)
gimme <- lapply(dates, parse.day)
event.table <- do.call(rbind, gimme)
## games.list <- unique(paste0(gimme.too$GameDate, gimme.too$awayteam, gimme.too$hometeam))
if (year1 < 2011) event.table$hometeam[event.table$hometeam=="WPG"] <- "ATL"
if (year1 < 2011) event.table$awayteam[event.table$awayteam=="WPG"] <- "ATL"
if (year1 < 2014) event.table$hometeam[event.table$hometeam=="ARI"] <- "PHX"
if (year1 < 2014) event.table$awayteam[event.table$awayteam=="ARI"] <- "PHX"
if (savethis) save (event.table, file=paste0(direc,"espn-", year, year+1,".RData"))
return(event.table)
}
for (season in seasons[seasons <= 20132014]) prep.season (substr(season,1,4))
year1 <- 2013
dir.create ("espn-games", showWarnings = FALSE)
year1 <- as.numeric(year1)
dates <- seq(as.Date(paste0(year1,"-07-01")),
min(as.Date(paste0(year1+1,"-06-30")), Sys.Date()), by=1)
gimme <- lapply(dates, parse.day)
GameDate="20130702"
GameDate <- gsub("-","", GameDate); print(GameDate)
tryCatch(load(paste0(direc,"espn-",GameDate,".RData")),
error=function(cond) {get.one.day(GameDate, direc); load(paste0(direc,"espn-",GameDate,".RData"))})
direc="espn-games/"
get=FALSE
tryCatch(load(paste0(direc,"espn-",GameDate,".RData")),
error=function(cond) {get.one.day(GameDate, direc); load(paste0(direc,"espn-",GameDate,".RData"))})
evtable <- if (length (gamebits) > 0) rbind_all(lapply(gamebits, parse.game)) else data.frame()
evtable
parse.day <- function (GameDate=as.character(Sys.Date()), get=FALSE, direc="espn-games/") {
## GameDate="20130702"
GameDate <- gsub("-","", GameDate); print(GameDate)
if (get) get.one.day(GameDate, direc)
tryCatch(load(paste0(direc,"espn-",GameDate,".RData")),
error=function(cond) {get.one.day(GameDate, direc); load(paste0(direc,"espn-",GameDate,".RData"))})
evtable <- if (length (gamebits) > 0) rbind_all(lapply(gamebits, parse.game)) else data.frame()
evtable
}
gimme <- lapply(dates, parse.day)
warnings()
for (season in seasons[seasons >= 20142015]) prep.season.sportsnet (substr(season,1,4))
prep.season.sportsnet <- function(year1=2015, savethis=TRUE, arch.direc="source-data/") {
year1 <- as.numeric(year1)
dates <- seq(as.Date(paste0(year1,"-10-01")),
min(as.Date(paste0(year1+1,"-06-30")), Sys.Date()), by=1)
gimme <- lapply(dates, parse.day.sportsnet)
event.table <- do.call(rbind, gimme)
event.table$season <- paste0(year1, year1+1)
if (savethis) save (event.table, file=paste0(arch.direc,"spo-", year1, year1+1,".RData"))
return(event.table)
}
for (season in seasons[seasons >= 20142015]) prep.season.sportsnet (substr(season,1,4))
season
prep.season.sportsnet (substr(season,1,4))
GameDate="2015-12-08"
message ("Parsing ",GameDate)
if (getdl) get.one.day.sportsnet(GameDate, direc)
get.one.day.sportsnet(GameDate, direc)
day="2015-12-08"
message(day)
mainpage <- readLines(paste0("http://www.sportsnet.ca/hockey/nhl/scores/?datepicker-date=",day))
gameids <- unique(unlist(regmatches (mainpage, gregexpr("http://www.sportsnet.ca/hockey/nhl/livetracker/game/[0-9]+", mainpage))))
gameids
gamebits <- lapply(gameids, function(this.id) readLines(this.id))
gamebits <- lapply(gameids, function(this.id)
tryCatch(readLines(this.id), error=function(cond) {message("whoops ",GameDate); data.frame()})
)
summary(gamebits)
gamebits <- lapply(gameids, function(this.id)
tryCatch(readLines(this.id), error=function(cond) {message("whoops ",GameDate); NULL})
)
summary(gamebits)
gamebits[[2]]
get.one.day.sportsnet <- function (day, direc="espn-games/") {
#day="2015-12-08"
message(day)
mainpage <- readLines(paste0("http://www.sportsnet.ca/hockey/nhl/scores/?datepicker-date=",day))
gameids <- unique(unlist(regmatches (mainpage, gregexpr("http://www.sportsnet.ca/hockey/nhl/livetracker/game/[0-9]+", mainpage))))
gamebits <- lapply(gameids, function(this.id)
tryCatch(readLines(this.id), error=function(cond) {message("whoops ",GameDate); NULL})
)
save (mainpage, gameids, gamebits, file=paste0(direc,"spo-",day,".RData"))
}
parse.game.sportsnet <- function (gamefeed, GameDate) tryCatch({
## load("espn-games/spo-2014-10-08.RData"); gamefeed = gamebits[[4]]
## {"game":{"id":20007
gamefeed <- gsub("null", "420", gamefeed)
gameinfo1 <- unlist(regmatches (gamefeed, gregexpr('\\{"game":\\{"id":[0-9]+', gamefeed)))
gameinfo <- unlist(regmatches (gameinfo1, gregexpr('[0-9]+', gameinfo1)))
eventinfo <- unlist(regmatches (gamefeed, gregexpr('\\{"id":[0-9]+,"loc.*?"momentum', gamefeed)))
event.split.prime <- gsub('.*"location":\\[([0-9-]+),([0-9-]+)\\],"event":"([a-z-]+).*"elapsed":"([0-9:]+)".*"period":([0-9]+).*"type":"([a-z]+).*', '\\1;\\2;\\3;\\4;\\5;\\6',eventinfo)
event.split.2 <- do.call(rbind, strsplit(event.split.prime,";"))
timesplits <- do.call(rbind, strsplit(event.split.2[,4], ":"))
event.split <- data.frame(gcode=gameinfo,
xcoord=as.numeric(event.split.2[,1]),
ycoord=as.numeric(event.split.2[,2]),
etype=c("GOAL","SHOT","MISS","BLOCK","PENL","HIT")[match(event.split.2[,3], c("score","shot-on-goal","shot-missed","shot-blocked","penalty","hit"))],
period=as.numeric(event.split.2[,5]),
seconds=1200*(as.numeric(event.split.2[,5])-1) + as.numeric(timesplits[,1])*60 + as.numeric(timesplits[,2]))
return(event.split)
}, error=function(cond) {message("whoops ",GameDate); NULL})
parse.day.sportsnet <- function (GameDate=as.character(Sys.Date()), getdl=FALSE, direc="espn-games/") {
## GameDate="2015-12-08"
message ("Parsing ",GameDate)
if (getdl) get.one.day.sportsnet(GameDate, direc)
tryCatch(load(paste0(direc,"spo-",GameDate,".RData")),
error=function(cond) {get.one.day.sportsnet(GameDate, direc);
load(paste0(direc,"spo-",GameDate,".RData"))})
ev.table <- NULL
tryCatch(evtable <- do.call(rbind, lapply(gamebits, parse.game.sportsnet, GameDate)),
error=function(cond) {message (cond, " -- no games yet"); evtable=NULL})
evtable
}
prep.season.sportsnet (substr(season,1,4))
for (ss in seasons[seasons <= 20132014]) try (merge.locs(ss))
for (season in seasons[seasons <= 20132014]) prep.season (substr(season,1,4))
get.one.day <- function (day, direc="espn-games/") {
message(day)
mainpage <- readLines(paste0("http://scores.espn.go.com/nhl/scoreboard?date=",day))
gameids <- unique(unlist(regmatches (mainpage, gregexpr("gameId=[0-9]+", mainpage))))
gamebits <- lapply(gameids, function(this.id) {
tryCatch(readLines(paste0("http://sports.espn.go.com/nhl/gamecast/data/masterFeed?lang=en&isAll=true&rand=0&",this.id)),
error=function(cond) {message("whoops ",day); NULL})
})
save (mainpage, gameids, gamebits, file=paste0(direc,"espn-",day,".RData"))
}
for (season in seasons[seasons <= 20132014]) prep.season (substr(season,1,4))
prep.season <- function(year1=2005, savethis=TRUE, direc="source-data/") {
dir.create ("espn-games", showWarnings = FALSE)
year1 <- as.numeric(year1)
dates <- seq(as.Date(paste0(year1,"-07-01")),
min(as.Date(paste0(year1+1,"-06-30")), Sys.Date()), by=1)
gimme <- lapply(dates, parse.day)
event.table <- rbind_all (gimme)
## games.list <- unique(paste0(gimme.too$GameDate, gimme.too$awayteam, gimme.too$hometeam))
if (year1 < 2011) event.table$hometeam[event.table$hometeam=="WPG"] <- "ATL"
if (year1 < 2011) event.table$awayteam[event.table$awayteam=="WPG"] <- "ATL"
if (year1 < 2014) event.table$hometeam[event.table$hometeam=="ARI"] <- "PHX"
if (year1 < 2014) event.table$awayteam[event.table$awayteam=="ARI"] <- "PHX"
if (savethis) save (event.table, file=paste0(direc,"espn-", year1, year1+1,".RData"))
return(event.table)
}
for (season in seasons[seasons <= 20132014]) prep.season (substr(season,1,4))
for (ss in seasons[seasons <= 20132014]) try (merge.locs(ss))
try(merge.locs.sportsnet(seasons[seasons >= 20142015]))
for (ss in seasons[seasons >= 20142015]) try (merge.locs.sportsnet(ss))
for (ss in seasons) impute.shot.locs(ss)
create.adjusted.distance()
for (ss in seasons) try(update.adjusted.distance(ss))
make.game.files()
make.collective.coplay.files ()
replace.tc.all ()
library(doMC)
replace.tc.all ()
install.packages("doMC")
library(doMC)
install.packages("doMC")
install.packages("foreach")
library(foreach)
replace.tc.all ()
load("C:/Users/acthomas/Documents/GitHub/DIY/common-data/games/2013201420001.RData")
View(playerrun)
View(playerrun %>% filter (score.diff.cat == 8))
